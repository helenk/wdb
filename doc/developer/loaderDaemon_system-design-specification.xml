<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
	<!ENTITY % wdb.entities SYSTEM "../docbook/wdb_entities.ent">
	%wdb.entities;
]
>

<chapter id="cha:loaderDaemon_system-design-specification">


	<title>loaderDaemon - System Design Specification</title>

	<sect1>
		<title>Introduction</title>
		
		<para>
			The wdb loaderDaemon is a program to help controlling loading of data into wdb. 
			It is meant to be run as a daemon, waiting for signals from other processes or 
			systems, such as ECMWF's Supervisor Monitor Scheduler (SMS).
		</para>
		
	</sect1>

	<sect1>
		<title>System overwiew</title>

		<para>
			Starting this program will create a data loading "daemon" listening for
			http requests to load a data into wdb. Once an http request has been received, 
			the program will attempt to parse the requested file "path", and translate it 
			into one or several absolute paths to data files. Exactly how this parsing is 
			done is a matter of configuration, although it is currently not possible to 
			change the parsing method wihtout modifying the source code.  
		</para>

		<para>
			After the paths have been parsed, an appropriate loading program will be 
			called, with the paths as argument, and if everything goes well, the server
			will return 200 - ok, to the caller, and continue listening for new requests.
		</para>
		
		<para>
			I anything goes wrong during loading, the server will return 404 - Not Found. 
			The loading program will check if all files to be loaded actually exists before 
			trying to load any files. Therefore, if loaderDaemon returns 404, some data may 
			or may not have been loaded into the database, depending on the reason for the 
			error. This somewhat simplified system will be improved at some point.
		</para>
		
	</sect1>

<sect1>
	<title>Core classes and files</title>
	
	<sect2>
		<title>loaderDaemon.py</title>
		<para>
			This file contains the code to be run when the loaderDaemon program is 
			invoked. Beside code for parsing command line options and displaying help messages and
			such, it creates a <code>HTTPServer</code> object listening on port 7894, and 
			loops forever, while accepting incoming connections. Handling of each 
			connection is delegated to a new instance of the <code>WdbLoader</code> class.
		</para>
	</sect2>
	
	<sect2>
		<title>WdbLoader</title>
		<para>
			This is the handling class for each connection. It merely calls the correct html 
			path parsing function, and thereafter calls the correct loading function
			for the input.
		</para>	
	</sect2>

	<sect2>
		<title>htmlPathParser.py</title>
		<para>
			This module contains all HTML path parser functions. Each function takes a single 
			input argument - the request path from the HTTP GET call. The return value is a
			tuple, containing a loading function, and a list of files to be loaded into wdb.
			The functions does not perform any validity check on the file names beside what 
			is required to parse the input string.
		</para>
	</sect2>		

	<sect2>
		<title>loaders.py</title>	
		<para>
			This module contains loading functions, which calls the 
			correct wdb loading program, as decided by a function from the 
			<code>htmlPathParser</code> module. These functions perform a reasonable amount 
			of sanity checking of the input files before attempting to load them into wdb.  
		</para>

		<!--
		<sect3>
			<title>gribLoad</title>
			<para>
				Runs gribLoad.
			</para>
		</sect3>
			-->
	</sect2>
	
	<sect2>
		<title>wdbInstallation.py</title>
		<para>
			This is a container for installation specific data.
		</para>		
	</sect2>
	
</sect1>

</chapter>
