<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
"http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
	<!ENTITY % wdb.entities SYSTEM "../docbook/wdb_entities.ent">
	%wdb.entities;
]
>

<chapter id="cha:kvalobsLoad_system-design-specification">


	<title>KvalobsLoad - System Design Specification</title>

	<sect1>
		<title>Introduction</title>
		<para>KvalobsLoad is a program for loading observations into the WDB
from kvalobs. It is run as a daemon, relying on kvalobs' push-based
interface for data transfer.</para>

	</sect1>

	<sect1>
		<title>System overwiew</title>

		<para>The KvalobsLoad program is a daemon, whose task is to wait for data
from kvalobs. When receiving such data, it is translated into the
WDB format, and stored into the database, in the wdb.floatvalue
table.</para>

		<para>No data is ever deleted from the database. If the value of a parameter
changes, a new entry will be made into the database, with dataversion
incremented by one.</para>

		<para>Both missing and rejected values will be stored in the database. These
will have the special value "NaN" (not a number), and the quality flag
will be set appropriately.</para>
	
	<sect2>
		<title>Special values for precipitation</title>
		<para>Collected precipitation may in kvalobs be expressed as -1, meaning no
rain, as opposed to 0, which means rain, but not
measurable. kvalobsLoad does not change this.</para>
	</sect2>

	<sect2>
		<title>Caching of database searches</title>
		<para>In order to perform conversion from kvalobs data to wdb data, we need
a few conversion tables. These are stored in the wdb database.These
tables will never change, and some of them are fairly
small. Therefore, once we have looked up a row from these tables, we
cache the result in memory, reducing the need to contact the database
needlessly.</para>
	</sect2>
</sect1>

<sect1>
	<title>Core classes and files</title>
	
	<figure id="fig:kvalobsLoad_class_diagram">
		<title>kvalobsLoad class diagram</title>
		<mediaobject>
			<imageobject role="html">
				<imagedata align="center"
					fileref="gfx/kvalobsLoad_class-diagram.png" format="PNG"
					scalefit="1" width="100%" contentdepth="100%"/>
			</imageobject>
		</mediaobject>
	</figure>
	
	<para>The controlling class is KvalobsListener, which manages a set of worker threads.
		The class contains functions for starting and stopping the threads.</para>
	
	<para>The worker class is IncomingDataHandler, of which several objects are
		instatiated in their own thread by the KvalobsListener. The handlers listen for data
		from kvalobs, and, upon receiving them, creates and call an InsertDataTransaction
		object.</para>
	
	<para>InsertDataTransaction creates and performs the actual SQL query to insert
		kvalobs data into the database.</para>
	
	<para>Caching is handled by the WdbCache object. Each IncomingDataHandler holds its own
		instance of the cahce, and as each InsertDataTransaction is created, it gets a
		reference to that cache, to use or fill in as needed.</para>
	
	<figure id="fig:kvalobsLoad_sequence_diagram">
		<title>kvalobsLoad sequence diagram</title>
		<mediaobject>
			<imageobject role="html">
				<imagedata align="center"
					fileref="gfx/kvalobsLoad_sequence-diagram.png" format="PNG"
					scalefit="0" width="100%" contentdepth="100%"/>
			</imageobject>
		</mediaobject>
	</figure>
	
</sect1>

</chapter>
